import 'package:flutter/material.dart';
import 'package:cloud_firestore/cloud_firestore.dart';

class ShowTablesPage extends StatefulWidget {
  @override
  _ShowTablesPageState createState() => _ShowTablesPageState();
}

class _ShowTablesPageState extends State<ShowTablesPage> {
  // Lista para almacenar las tablas recuperadas de Firestore
  List<Map<String, dynamic>> _tables = [];

  @override
  void initState() {
    super.initState();
    // Llama a la función para recuperar las tablas del usuario al cargar la página
    _getTablesFromFirestore();
  }

  // Función para recuperar las tablas del usuario desde Firestore
  Future<void> _getTablesFromFirestore() async {
    // Asegúrate de haber inicializado Firebase antes de usar Firestore
    // (Por ejemplo, en el método 'main' de main.dart)

    // Obtén una instancia de FirebaseAuth si es necesario
    // final FirebaseAuth _auth = FirebaseAuth.instance;

    // Obtén el usuario actualmente autenticado si es necesario
    // User? user = _auth.currentUser;

    // Verifica si el usuario está autenticado y obtén el UID si es así
    // String userId = '';
    // if (user != null) {
    //   userId = user.uid;
    // } else {
    //   print('Usuario no autenticado.');
    //   return;
    // }

    // Crea una referencia a la colección "users" y el documento usando el ID del usuario
    // CollectionReference usersCollection = FirebaseFirestore.instance.collection('users');
    // DocumentReference userDocument = usersCollection.doc(userId);

    try {
      // Obtén los datos de Firestore
      QuerySnapshot querySnapshot =
          await FirebaseFirestore.instance.collection('users').get();

      // Limpia la lista antes de agregar las nuevas tablas
      _tables.clear();

      // Recorre cada documento en la colección y agrega la tabla a la lista
      querySnapshot.docs.forEach((documentSnapshot) {
        Map<String, dynamic> tableData = documentSnapshot.data()['cotizaciones'];
        _tables.add(tableData);
      });

      // Notifica al widget que los datos han cambiado y se debe reconstruir
      setState(() {});
    } catch (e) {
      print('Error al obtener las tablas: $e');
    }
  }

  @override
  Widget build(BuildContext context) {
    return Scaffold(
      appBar: AppBar(
        title: Text('Lista de Tablas'),
      ),
      body: _tables.isEmpty
          ? Center(
              child: Text('No se encontraron tablas.'),
            )
          : ListView.builder(
              itemCount: _tables.length,
              itemBuilder: (context, index) {
                // Obtiene los datos de la tabla actual
                Map<String, dynamic> tableData = _tables[index];
                // Formatea los datos para mostrarlos en un texto
                String tableText =
                    'Cuota: ${tableData['Cuota']}\n'
                    'Saldo Inicial: ${tableData['Saldo Inicial']}\n'
                    'Valor de Cuota: ${tableData['Valor de Cuota']}\n'
                    'Interés: ${tableData['Interés']}\n'
                    'Abono al Capital: ${tableData['Abono al Capital']}\n'
                    'Saldo del Período: ${tableData['Saldo del Período']}';

                // Retorna un widget para mostrar la tabla
                return Card(
                  margin: EdgeInsets.all(8.0),
                  child: ListTile(
                    title: Text('Tabla ${index + 1}'),
                    subtitle: Text(tableText),
                  ),
                );
              },
            ),
    );
  }
}
